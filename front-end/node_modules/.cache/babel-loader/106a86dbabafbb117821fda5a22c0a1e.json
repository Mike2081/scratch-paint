{"ast":null,"code":"var _jsxFileName = \"/Users/michaeldoho/Documents/Dev/shareable-whiteboard/front-end/src/Components/CanvasFunctions.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useRef, useState } from \"react\";\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CanvasFunctions = /*#__PURE__*/React.createContext();\nexport const CanvasProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [beginDrawing, setbeginDrawing] = useState(false);\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null); //^ will be wrapped around <App/> in index.js, \n  // so these hooks can be used on different components\n\n  const socket = io.connect(\"http://localhost:5000\");\n  this.socket.on(\"canvas-data\", function (data) {\n    const root = this;\n    const interval = setInterval(function () {\n      if (root.beginDrawing) return;\n      root.beginDrawing = true;\n      clearInterval(interval);\n      const image = new Image();\n      const canvas = document.querySelector();\n      const ctx = canvas.getContext('2d');\n\n      image.onload = function () {\n        ctx.drawImage(image, 0, 0);\n        root.beginDrawing = false;\n      };\n\n      image.src = data;\n    }, 200);\n  });\n\n  const setupCanvas = () => {\n    const canvas = canvasRef.current;\n    canvas.width = window.innerWidth * 2;\n    canvas.height = window.innerHeight * 2; //^ Doubling the pixel density for better optics for,\n    // retina displays\n\n    const context = canvas.getContext(\"2d\");\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"black\";\n    context.lineWidth = 5;\n    contextRef.current = context; //^ canvas drawing ratio appearance, end of the lines are round,\n    // colour is black, thickness of line is 5\n  };\n\n  const startDrawing = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setbeginDrawing(true); //beginPath() when the mouse is clicked\n    //nativeEvent grabs the mouse movements\n    //moveTo where the last x,y cordinates are when the mouse is let go\n  };\n\n  const doneDrawing = () => {\n    contextRef.current.closePath();\n    setbeginDrawing(false); //when mouse is let go, set set beginDrawing to false\n  };\n\n  const root = this;\n\n  const draw = _ref3 => {\n    let {\n      nativeEvent\n    } = _ref3;\n\n    if (!beginDrawing) {\n      //if beginDrawing is set to true than return\n      return;\n    }\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent; //nativeEvent grabs the mouse movements\n\n    contextRef.current.lineTo(offsetX, offsetY); //draws a line from new to old cordinates\n\n    contextRef.current.stroke(); //this is what draws the that line\n\n    if (root.timeout != undefined) clearTimeout(root.timeout);\n    root.timeout = setTimeout(function () {\n      const base64ImageData = canvas.toDataURL(\"image/png\");\n      root.socket.emit(\"canvas-data\", base64ImageData);\n    }, 1000);\n  };\n\n  const eraseCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  };\n\n  return /*#__PURE__*/_jsxDEV(CanvasFunctions.Provider, {\n    value: {\n      canvasRef,\n      contextRef,\n      setupCanvas,\n      startDrawing,\n      doneDrawing,\n      eraseCanvas,\n      draw\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CanvasProvider, \"D8VWISPXViu+5ANo5Vnam2la40g=\");\n\n_c = CanvasProvider;\nexport const CanvasStuff = () => {\n  _s2();\n\n  return useContext(CanvasFunctions);\n};\n\n_s2(CanvasStuff, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\n_c2 = CanvasStuff;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CanvasProvider\");\n$RefreshReg$(_c2, \"CanvasStuff\");","map":{"version":3,"sources":["/Users/michaeldoho/Documents/Dev/shareable-whiteboard/front-end/src/Components/CanvasFunctions.js"],"names":["React","useContext","useRef","useState","io","CanvasFunctions","createContext","CanvasProvider","children","beginDrawing","setbeginDrawing","canvasRef","contextRef","socket","connect","on","data","root","interval","setInterval","clearInterval","image","Image","canvas","document","querySelector","ctx","getContext","onload","drawImage","src","setupCanvas","current","width","window","innerWidth","height","innerHeight","context","scale","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","doneDrawing","closePath","draw","lineTo","stroke","timeout","undefined","clearTimeout","setTimeout","base64ImageData","toDataURL","emit","eraseCanvas","fillStyle","fillRect","CanvasStuff"],"mappings":"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","sourcesContent":["import React, { useContext, useRef, useState } from \"react\";\nimport io from 'socket.io-client';\n\n\n\n    const CanvasFunctions = React.createContext();\n\n    \n    export const CanvasProvider = ({ children }) => {\n        const [beginDrawing, setbeginDrawing] = useState(false)\n        const canvasRef = useRef(null);\n        const contextRef = useRef(null);\n        //^ will be wrapped around <App/> in index.js, \n        // so these hooks can be used on different components\n        \n        const socket = io.connect(\"http://localhost:5000\");    \n    \n        this.socket.on(\"canvas-data\", function(data){\n    \n                const root = this;\n                const interval = setInterval(function(){\n                    if(root.beginDrawing) return;\n                    root.beginDrawing = true;\n                    clearInterval(interval);\n                    const image = new Image();\n                    const canvas = document.querySelector();\n                    const ctx = canvas.getContext('2d');\n                    image.onload = function() {\n                        ctx.drawImage(image, 0, 0);\n    \n                        root.beginDrawing = false;\n                    };\n                    image.src = data;\n                }, 200)\n            })\n\n        const setupCanvas = () => {\n            const canvas = canvasRef.current\n            canvas.width = window.innerWidth * 2;\n            canvas.height = window.innerHeight * 2;\n            //^ Doubling the pixel density for better optics for,\n            // retina displays\n\n            const context = canvas.getContext(\"2d\")\n            context.scale(2, 2);\n            context.lineCap = \"round\";\n            context.strokeStyle = \"black\";\n            context.lineWidth = 5;\n            contextRef.current = context;\n            //^ canvas drawing ratio appearance, end of the lines are round,\n            // colour is black, thickness of line is 5\n        };\n\n        const startDrawing = ({ nativeEvent }) => {\n            const { offsetX, offsetY } = nativeEvent;\n            contextRef.current.beginPath();\n            contextRef.current.moveTo(offsetX, offsetY);\n            setbeginDrawing(true);\n            //beginPath() when the mouse is clicked\n            //nativeEvent grabs the mouse movements\n            //moveTo where the last x,y cordinates are when the mouse is let go\n        };\n\n        const doneDrawing = () => {\n            contextRef.current.closePath();\n            setbeginDrawing(false);\n            //when mouse is let go, set set beginDrawing to false\n        };\n\n        const root = this;\n        const draw = ({ nativeEvent }) => {\n            if (!beginDrawing) { //if beginDrawing is set to true than return\n            return;\n            }\n            const { offsetX, offsetY } = nativeEvent; //nativeEvent grabs the mouse movements\n            contextRef.current.lineTo(offsetX, offsetY); //draws a line from new to old cordinates\n            contextRef.current.stroke(); //this is what draws the that line\n\n            if(root.timeout != undefined) clearTimeout(root.timeout);\n            root.timeout = setTimeout(function(){\n                const base64ImageData = canvas.toDataURL(\"image/png\");\n                root.socket.emit(\"canvas-data\", base64ImageData);\n            }, 1000)\n        };\n\n        const eraseCanvas = () => {\n            const canvas = canvasRef.current;\n            const context = canvas.getContext(\"2d\")\n            context.fillStyle = \"white\"\n            context.fillRect(0, 0, canvas.width, canvas.height)\n        }\n\n    return (\n        <CanvasFunctions.Provider\n            value={{\n                canvasRef,\n                contextRef,\n                setupCanvas,\n                startDrawing,\n                doneDrawing,\n                eraseCanvas,\n                draw,\n            }}\n        >\n            {children}\n        </CanvasFunctions.Provider>\n    )\n};\n\nexport const CanvasStuff = () => useContext(CanvasFunctions);\n"]},"metadata":{},"sourceType":"module"}