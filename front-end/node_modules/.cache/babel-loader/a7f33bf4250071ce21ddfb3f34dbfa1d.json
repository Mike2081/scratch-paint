{"ast":null,"code":"var _jsxFileName = \"/Users/michaeldoho/Documents/Dev/shareable-whiteboard/front-end/src/Components/CanvasFunctions.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CanvasFunctions = /*#__PURE__*/React.createContext();\nexport const CanvasProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [beginDrawing, setbeginDrawing] = useState(false);\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null); //^ will be wrapped around <App/> in index.js, \n  // so these hooks can be used on different components\n\n  const setupCanvas = () => {\n    const canvas = canvasRef.current;\n    canvas.width = window.innerWidth * 2;\n    canvas.height = window.innerHeight * 2;\n    canvas.style.width = `${window.innerWidth}px`;\n    canvas.style.height = `${window.innerHeight}px`; //^ Doubling the pixel density for better optics for,\n    // retina displays\n\n    const context = canvas.getContext(\"2d\");\n    context.scale(2, 2);\n    context.lineCap = \"round\";\n    context.strokeStyle = \"black\";\n    context.lineWidth = 5;\n    contextRef.current = context; //^ canvas drawing ratio appearance, end of the lines are round,\n    // colour is black, thickness of line is 5\n  };\n\n  const startDrawing = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent;\n    contextRef.current.beginPath();\n    contextRef.current.moveTo(offsetX, offsetY);\n    setbeginDrawing(true); //beginPath() when the mouse is clicked\n    //nativeEvent grabs the mouse movements\n    //moveTo where the last x,y cordinates are when the mouse is let go\n  };\n\n  const doneDrawing = () => {\n    contextRef.current.closePath();\n    setbeginDrawing(false); //when mouse is let go, set set beginDrawing to false\n  };\n\n  const draw = _ref3 => {\n    let {\n      nativeEvent\n    } = _ref3;\n\n    if (!beginDrawing) {\n      //if beginDrawing is set to true than return\n      return;\n    }\n\n    const {\n      offsetX,\n      offsetY\n    } = nativeEvent; //nativeEvent grabs the mouse movements\n\n    contextRef.current.lineTo(offsetX, offsetY); //draws a line from new to old cordinates\n\n    contextRef.current.stroke(); //this is what draws the that line\n  };\n\n  const eraseCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    context.fillStyle = \"white\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  };\n\n  return /*#__PURE__*/_jsxDEV(CanvasFunctions.Provider, {\n    value: {\n      canvasRef,\n      contextRef,\n      setupCanvas,\n      startDrawing,\n      doneDrawing,\n      eraseCanvas,\n      draw\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CanvasProvider, \"D8VWISPXViu+5ANo5Vnam2la40g=\");\n\n_c = CanvasProvider;\nexport const canvasStuff = () => {\n  _s2();\n\n  return useContext(CanvasFunctions);\n};\n\n_s2(canvasStuff, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CanvasProvider\");","map":{"version":3,"sources":["/Users/michaeldoho/Documents/Dev/shareable-whiteboard/front-end/src/Components/CanvasFunctions.js"],"names":["React","useContext","useRef","useState","CanvasFunctions","createContext","CanvasProvider","children","beginDrawing","setbeginDrawing","canvasRef","contextRef","setupCanvas","canvas","current","width","window","innerWidth","height","innerHeight","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","doneDrawing","closePath","draw","lineTo","stroke","eraseCanvas","fillStyle","fillRect","canvasStuff"],"mappings":"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","sourcesContent":["import React, { useContext, useRef, useState } from \"react\";\n\n\n\n    const CanvasFunctions = React.createContext();\n\n    export const CanvasProvider = ({ children }) => {\n        const [beginDrawing, setbeginDrawing] = useState(false)\n        const canvasRef = useRef(null);\n        const contextRef = useRef(null);\n        //^ will be wrapped around <App/> in index.js, \n        // so these hooks can be used on different components\n\n        const setupCanvas = () => {\n            const canvas = canvasRef.current\n            canvas.width = window.innerWidth * 2;\n            canvas.height = window.innerHeight * 2;\n            canvas.style.width = `${window.innerWidth}px`;\n            canvas.style.height = `${window.innerHeight}px`;\n            //^ Doubling the pixel density for better optics for,\n            // retina displays\n\n            const context = canvas.getContext(\"2d\")\n            context.scale(2, 2);\n            context.lineCap = \"round\";\n            context.strokeStyle = \"black\";\n            context.lineWidth = 5;\n            contextRef.current = context;\n            //^ canvas drawing ratio appearance, end of the lines are round,\n            // colour is black, thickness of line is 5\n        };\n\n        const startDrawing = ({ nativeEvent }) => {\n            const { offsetX, offsetY } = nativeEvent;\n            contextRef.current.beginPath();\n            contextRef.current.moveTo(offsetX, offsetY);\n            setbeginDrawing(true);\n            //beginPath() when the mouse is clicked\n            //nativeEvent grabs the mouse movements\n            //moveTo where the last x,y cordinates are when the mouse is let go\n        };\n\n        const doneDrawing = () => {\n            contextRef.current.closePath();\n            setbeginDrawing(false);\n            //when mouse is let go, set set beginDrawing to false\n        };\n\n        const draw = ({ nativeEvent }) => {\n            if (!beginDrawing) { //if beginDrawing is set to true than return\n            return;\n            }\n            const { offsetX, offsetY } = nativeEvent; //nativeEvent grabs the mouse movements\n            contextRef.current.lineTo(offsetX, offsetY); //draws a line from new to old cordinates\n            contextRef.current.stroke(); //this is what draws the that line\n        };\n\n        const eraseCanvas = () => {\n            const canvas = canvasRef.current;\n            const context = canvas.getContext(\"2d\")\n            context.fillStyle = \"white\"\n            context.fillRect(0, 0, canvas.width, canvas.height)\n        }\n\n    return (\n        <CanvasFunctions.Provider\n            value={{\n                canvasRef,\n                contextRef,\n                setupCanvas,\n                startDrawing,\n                doneDrawing,\n                eraseCanvas,\n                draw,\n            }}\n        >\n            {children}\n        </CanvasFunctions.Provider>\n    )\n};\n\nexport const canvasStuff = () => useContext(CanvasFunctions);\n"]},"metadata":{},"sourceType":"module"}